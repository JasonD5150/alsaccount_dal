<project default="test">

	<!--FWP BUILD FILE VERSION 1.0-->
	<!--Project specific settings. The rest of this build file is generic and can be used as-is.-->
	<property name="project.output.jar.name" value="build/jar/alsadmin_dal.jar">
	</property>
	<!--End project specific settings.-->


	<path id="project.class.path">
		<fileset dir="${jboss.server.root}/server/default/deployers/ejb3.deployer" id="id">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${jboss.server.root}/server/default/deployers/jbossweb.deployer" id="id">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${jboss.server.root}/server/default/deploy/jbossweb.sar" id="id">
			<include name="*.jar"/>
		</fileset>
		<fileset dir="${jboss.server.root}/server/default/lib" id="id">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${jboss.server.root}/client" id="id">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${jboss.server.root}/lib/endorsed" id="id">
			<include name="*.jar" />
		</fileset>
		<fileset dir="${jboss.server.root}/lib" id="id">
			<include name="*.jar" />
		</fileset>

	</path>

	<target name="clean">
		<delete dir="build"/>
	</target>

	<target name="compile" >
		<echo message="building classes..."/>
		<mkdir dir="build/classes/" />
		<mkdir dir="build/tests/" />

		<javac debug="true" srcdir="./" destdir="build/classes" classpathref="project.class.path" />
		
		<move failonerror="false" file="build/classes/tests" todir="build/tests" />
		<javadoc destdir="build/doc" 
			       sourcepath="./" 
			       excludepackagenames="tests/**" 
			       verbose="false" 
			       classpathref="project.class.path" 
			       noindex="false" 
			       public="true">
		</javadoc>

		<copy todir="build/classes/fwp/">
			<fileset file="build/doc/fwp/**">
			</fileset>
		</copy>
		
		<!-- copy all xml files in tree for technologies like struts and hibernate -->
	    <copy verbose="true" preservelastmodified="yes" todir="build/classes">
	    	<fileset  dir="./" includes="**/*.xml" />
	  	</copy>		
		
		<!-- Include the following copy if you want the index files at the top level. (Eclipse does not need them for auto-complete)
		<copy todir="build/classes/">
        <fileset file="build/doc/index.html">
        </fileset>
			<fileset file="build/doc/package-list">
			</fileset>
        </copy>
        -->

	</target>

	<target name="build" depends="compile">
		<echo message="jarring classes..." />
		<mkdir dir="build/jar" />
		<jar destfile="${project.output.jar.name}" basedir="build/classes">
			<manifest>
				<attribute name="Main-Class" value="Main"/>
			</manifest>
		</jar>
		<!--<delete dir="build/classes" />-->
	</target>

	<target name="rebuild" depends="clean,build">
	</target>

	<target name="run" depends="build">
		<java jar="${project.output.jar.name}" fork="true"/>
	</target>


	<target name="run-tests"  depends="build" description="run your test suite" >
		<mkdir dir="build/reports/"/>
		<junit printsummary="yes" haltonfailure="no" showoutput="yes" >

			<classpath>
				<path refid="project.class.path"/>
				<pathelement path="${project.output.jar.name}"/>
				<pathelement path="build/tests/"/>
			</classpath>

			<!--
            To do a single test...
            <test name="tests.Main" />
            -->

			<!--Need this here otherwise no summary file output will be generated-->
			<formatter type="xml" />

			<batchtest fork="false" haltonerror="false" todir="build/reports" >
				<!--
                if you are not jarring up the files.
                -->
				<fileset dir="build/tests" casesensitive="yes">
					<include name="**/*.class"/>
					<!--exclude inner classes-->
					<exclude name="**/*$$*"/>
				</fileset>


				<!--
                this may work if your tests are bundled in a jarfile...
                <zipfileset src="${project.output.jar.name}" includes="**/*.class" />
                -->
			</batchtest>
		</junit>

	</target>

	<target name ="test" depends="run-tests">
		<junitreport todir="build/reports">
			<fileset dir="build/reports">
				<include name="TEST-*.xml"/>
			</fileset>
			<report format="frames" todir="build/reports"/>
		</junitreport>
	</target>


</project>
